generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  file_id    String
  url        String
  userId     String?   @unique @db.ObjectId
  shopId     String?   @unique @db.ObjectId
  users      users?    @relation(fields: [userId], references: [id])
  shops      shops?    @relation(fields: [shopId], references: [id])
  products   products? @relation(fields: [productsId], references: [id])
  productsId String?   @db.ObjectId
}

model users {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String        @unique
  password    String?
  following   String[]
  avatar      images?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  shopReviews shopReviews[]
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  users     users    @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopsId   String?  @db.ObjectId
  shops     shops?   @relation(fields: [shopsId], references: [id])
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  avatar        images?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String?
  socialLinks   Json[]
  rating        Float         @default(0)
  reviews       shopReviews[]
  sellerId      String        @unique @db.ObjectId
  sellers       sellers       @relation(fields: [sellerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      products[]
}

model sellers {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  phone_number String
  country      String
  password     String
  stripeId     String?
  shop         shops?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model discount_codes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  detailed_description  String
  short_description     String
  warranty              String?
  custom_specifications Json?
  slug                  String        @unique
  tags                  String[]
  cashOnDelivery      String?
  brand                 String?
  video_url             String?
  category              String
  colors                String[]
  sizes                 String[]
  discount_codes         String[]      @db.ObjectId
  stock                 Int
  sale_price            Float
  regular_price         Float
  subCategory           String
  custom_properties      Json
  images                images[]
  starting_data         DateTime?
  ending_data           DateTime?
  ratings                Float         @default(5)
  isDeleted             Boolean?      @default(false)
  deletedAt             DateTime?
  status                productStatus @default(Active)
  createdAt             DateTime      @default(now())
  updateAt              DateTime      @updatedAt
  shopId                String        @db.ObjectId
  Shop                  shops         @relation(fields: [shopId], references: [id])
}
